import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import NotesAPI from './services/noteServices';

const initialState = {
  items: [],
  status: '',
  error: {
    status: false,
    message: '',
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllNotes = createAsyncThunk(
  'notes/getAllNotes',
  async (data, { rejectWithValue }) => {
    try {
      const res = await NotesAPI.get_all_notes();
      return res;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);
export const deleteNote = createAsyncThunk(
  'notes/deleteNote',
  async (id, { rejectWithValue }) => {
    try {
      const res = await NotesAPI.delete_note(id);
      return { ...res, id };
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);
export const updateNote = createAsyncThunk(
  'notes/updateNote',
  async (note, { rejectWithValue }) => {
    try {
      const res = await NotesAPI.update_note(note);
      return res;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);
export const createNote = createAsyncThunk(
  'notes/createNote',
  async (note, { rejectWithValue }) => {
    try {
      const res = await NotesAPI.create_note(note);
      return res;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const noteSlice = createSlice({
  name: 'notes',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clear(state) {
      state.items = [];
      state.status = 'idle';
      state.message = '';
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllNotes.pending, (state) => {
        state.status = 'loading';
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(getAllNotes.fulfilled, (state, action) => {
        state.status = 'fulifilled';
        state.items = action.payload.payload;
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(getAllNotes.rejected, (state, action) => {
        state.status = 'rejected';
        state.error.status = true;
        console.log(action);
        state.error.message = action.payload.message;
      })
      .addCase(deleteNote.pending, (state) => {
        state.status = 'loading';
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(deleteNote.fulfilled, (state, action) => {
        state.status = 'fulifilled';
        /* state.items = state.items.filter(
          (item) => item._id !== action.payload.id
        ); */
        state.items.splice(
          state.items.map((note) => note._id).indexOf(action.payload.id),
          1
        );
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(deleteNote.rejected, (state, action) => {
        state.status = 'rejected';
        state.error.status = true;
        state.error.message = action.payload.message;
      })
      .addCase(createNote.pending, (state) => {
        state.status = 'loading';
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(createNote.fulfilled, (state, action) => {
        state.status = 'fulifilled';
        state.items.push(action.payload.payload);
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(createNote.rejected, (state, action) => {
        state.status = 'rejected';
        state.error.status = true;
        state.error.message = action.payload.message;
      })
      .addCase(updateNote.pending, (state) => {
        state.status = 'loading';
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(updateNote.fulfilled, (state, action) => {
        state.status = 'fulifilled';
        const noteIndex = state.items.findIndex(
          (note) => action.payload.payload._id === note._id
        );
        state.items[noteIndex] = action.payload.payload;
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(updateNote.rejected, (state, action) => {
        state.status = 'rejected';
        state.error.status = true;
        state.error.message = action.payload.message;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectNotes = (state) => state.notes.items;
export const selectNotesSlice = (state) => state.notes;
export const selectNotesError = (state) => state.notes.error;
export const { clear } = noteSlice.actions;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default noteSlice.reducer;
