import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import authAPI from './services/authServices';

const initialState = {
  userData: {
    token: localStorage.getItem('token') || '',
    username: localStorage.getItem('username') || '',
  },
  error: {
    status: false,
    message: '',
  },
  status: 'idle',
  message: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const login = createAsyncThunk(
  'auth/login',
  async (data, { rejectWithValue }) => {
    try {
      const res = await authAPI.login(data);
      return res;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);
export const signup = createAsyncThunk(
  'auth/signup',
  async (data, { rejectWithValue }) => {
    try {
      const res = await authAPI.signup(data);
      return res;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      localStorage.removeItem('token');
      localStorage.removeItem('username');
      state.userData = {};
      state.status = 'idle';
      state.message = '';
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(login.pending, (state) => {
        state.status = 'loading';
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = 'fulifilled';
        state.userData.username = action.payload.payload.username;
        state.userData.token = action.payload.payload.token;
        state.message = action.payload.message;
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(login.rejected, (state, action) => {
        state.status = 'rejected';
        state.error.status = true;
        state.error.message = action.payload.message;
      })
      .addCase(signup.pending, (state) => {
        state.status = 'loading';
        state.error.status = false;
        state.error.message = '';
      })
      .addCase(signup.fulfilled, (state, action) => {
        state.status = 'fulifilled';
        state.userData.username = action.payload.payload.username;
        state.userData.token = action.payload.payload.token;
        state.message = action.payload.message;
      })
      .addCase(signup.rejected, (state, action) => {
        state.status = 'rejected';
        state.error.status = true;
        state.error.message = action.payload.message;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAuth = (state) => state.auth.userData;
export const selectAuthError = (state) => state.auth.error;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export const { logout } = authSlice.actions;
export default authSlice.reducer;
